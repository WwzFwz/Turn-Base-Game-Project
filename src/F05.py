# Attack calculations
# Menghasilkan array yang berisi total damage yang dilakukan, angka terkecil untuk kemungkinan damage, angka terbesar untuk kemungkinan damage
from src.F00 import randomNumberGenerator
def damage_dealt(atk_power:int)->int:
    low_atk = atk_power * 0.7
    high_atk = atk_power * 1.3
    return  randomNumberGenerator (low_atk,high_atk)
# Defense calculations
# Menghasilkan array yang berisi total damage yang di blok dan total damage yang diterima
def damage_taken (def_power:int, damage_dealt:int)->float:
    damage_defensed = (damage_dealt)*(def_power/ 100)
    return (damage_dealt - damage_defensed )

# Monster dex
def owcadex(user_role, array):
    if user_role.lower() == "agent":
        print("""
    ======================================================
    |  ⣠⣶⣶⣶⣆⠀⣶⡆⠀⣶⡆⠀⣶⣦⢠⣶⣶⣶⣄⠀⠀⣴⣶⠀⠀⠀⠀⠀⠀⠀⢰⣶⣶⣶⣦⡀⢰⣶⣶⣶⣶⢲⣶⡀⢠⣶⡆   |
    |  ⣿⡟⠀⢹⣿⡇⣿⣇⢰⣿⣧⠀⣿⡇⣿⣿⠀⢹⣿⠀⢀⣿⣿⡆⠀⠀⠀⠀⠀⠀⢸⣿⡇⠈⣿⡇⢸⣿⠀⠀⠀⠀⢿⣧⣼⡿⠀   |⠀⠀⠀ 
    |  ⣿⡇⠀⢸⣿⡇⢿⣿⢸⣿⣿⣰⣿⠇⣿⣿⠀⠀⠀⠀⣸⣿⢹⣷⠀⠀⠀⠀⠀⠀⢸⣿⡇⠀⣿⡇⢸⣿⣤⣤⡄⠀⠈⣿⣿⠁⠀   |⠀⠀⠀
    |  ⣿⡇⠀⢸⣿⡇⢸⣿⣿⡇⣿⣿⣿⠀⣿⣿⠀⠀⠀⠀⣿⣯⣼⣿⡆⢰⣶⣶⣶⡆⢸⣿⡇⠀⣿⡇⢸⣿⠉⠉⠁⠀⢠⣿⣿⡄⠀   |⠀⠀⠀
    |  ⣿⣧⣀⣸⣿⠇⠘⣿⣿⠀⢹⣿⡇⠀⣿⣿⣀⣸⣿⢰⣿⠛⠛⢻⣧⠀⠀⠀⠀⠀⢸⣿⣇⣀⣿⡇⢸⣿⣀⣀⣀⢀⣿⡟⢹⣿⡄   |⠀⠀⠀
    |  ⠈⠛⠿⠟⠋⠀⠀⠛⠛⠀⠘⠛⠃⠀⠈⠛⠿⠟⠁⠛⠛⠀⠀⠘⠛⠀⠀⠀⠀⠀⠘⠛⠛⠛⠋⠁⠘⠛⠛⠛⠛⠚⠛⠀⠀⠛⠓⠀  |⠀⠀
    ======================================================""")
        for i in range (len(array)-1):
            print("Index ",i+1)
            print("---------")
            print("Monster Type   :",array[1+i][1])
            print("Attack Power   :",array[1+i][2])
            print("Defense Power  :",array[1+i][3])
            print("Monster Health :",array[1+i][4])
            print("======================================================")
    else:
        print('Owcadex hanya ditujukan untuk Agent. Silahkan masukkan command "HELP" untuk melihat daftar command yang dapat kamu panggil.')

# Print graphics
graphics = [
        """
⠀⠀⠀⠀⠀⠀⢰⠄⢇⠀⠀⠀⠀⣠⠒⡐⢂⠀⠀⠀⣸⠩⡄⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠘⡄⢠⠊⣙⠕⠁⠰⢀⣁⠼⡙⠕⡎⠢⢈⠇⠀⠀⠀
⠀⠀⠀⠀⠀⢀⡄⣸⣰⢝⡎⠀⡆⠂⢐⣬⠉⢢⠈⣜⢪⣇⠠⢤⡀⠀
⠀⠀⠀⠀⡠⠋⠀⡔⠩⢿⠀⠘⢦⣀⡨⢟⣀⣸⠀⣟⠣⠕⠒⡀⢡⠀
⠀⠀⢀⢴⠁⠀⣜⡀⠀⠸⠀⠀⣀⢤⠒⣒⠺⠆⠀⡇⠀⢀⢤⠇⢀⡆
⡀⠀⣘⣵⢀⢠⡦⠇⠀⠀⡇⣬⣧⣆⣣⣋⣃⣸⣤⠁⠀⢸⣴⠀⠈⡹
⠻⡽⠭⢿⡟⢩⠁⠀⢀⡠⢗⠙⣉⣁⣒⡊⠒⡅⡎⠀⠀⠀⠑⠚⠚⠁
⠀⠈⡩⢋⠕⣉⠄⢊⢡⠔⠈⣇⠀⠀⠀⠀⢀⡇⠃⢄⠀⠀⠀⠀⠀⠀
⠀⠀⠘⢤⣭⡰⠬⠒⢁⠔⠈⠀⠈⠉⠉⠉⠁⠀⠑⠤⠁⢒⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠈⠃⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡌⠀⢀⠏⠀⠀⠀⠀
⠀⠀⠀⢀⣤⢤⠤⡃⠀⠱⠀⠀⠀⠀⠀⠀⢀⣜⠀⡠⢦⠠⣄⠀⠀⠀
⠀⠀⠀⠘⠣⠧⠤⠄⠀⠐⠁⠀⠀⠀⠀⠀⠘⠒⠒⠀⠘⠒⠛⠀""",
"""
              ⠀⠀⠀⠀⠀⠀⠀⠀ ⡠⠤⣤⣤⣀⡀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢧⢸⣄⠉⠁⠉⢉⡲⢤
⠀⠀⠀⢀⡠⠴⠊⣭⠃⠀⣀⣀⡤⠴⢶⠤⠤⢤⣀⠀⢸⠸⠈⠣⡀⢠⠃⠀⠀
⠀⢀⢔⡉⢀⣀⠐⠐⢧⣾⣴⣿⡿⠀⠀⡏⡄⠀⠀⢱⡧⢀⡠⠤⠬⣎⣧⠀⠀
⠐⠋⠁⠀⠀⢸⠔⢢⣿⣿⣿⡿⠃⠀⢠⠃⠀⠠⢚⣉⣠⢯⠀⠀⠀⠈⠛⠀⠀
⠀⠀⠀⠀⠀⠈⠀⣼⠙⠛⠉⠀⢀⣠⢊⠆⠀⠀⠈⣴⠃⣼⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⡌⢦⣀⣀⠬⡺⠕⠁⠀⠀⠀⢀⠟⠸⡟⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⡇⣀⠀⡦⢄⣠⣾⣿⣾⣦⠀⢀⠼⢱⠁⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠳⡏⠉⠁⣀⠈⠻⣿⣿⠉⠀⠈⢠⠇⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⡏⠁⠈⠙⣿⢟⡀⢀⠄⢹⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⣀⡤⠀⡤⠃⠫⡉⠙⠃⠁⠀⠈⠠⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠰⠐⡀⠀⠀⠀⠀⣨⠆⠀⣀⠤⠒⠀⠙⠣⠤⠐⠒⠒⠄⡀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⢀⡤⠒⠊⡉⠀⠀⡜⠄⠀⠘⣏⡄⠀⣀⡠⠤⠠⢄⠘⡄⠀
⠀⠀⠀⠀⠀⠀⠀⢸⠀⡔⣳⠒⠒⠚⣿⠀⠰⢎⠀⠈⠁⠀⠀⠀⠀⢠⠇⡼⠀
⠀⠀⠀⠀⠀⠀⠀⠈⠳⢌⡘⢄⡀⠀⠘⠦⣀⣉⣉⣁⠒⣄⠀⠀⠀⣸⢼⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣈⡧⣸⠀⠀⠀⠀⢠⠔⠋⢀⡼⠀⠀⠀⠉⠉⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠓⠊⠁⠀⠀⠀⠀⠈⠙⠋⠁⠀⠀""",

"""
⠀⠀⠀⠀⠀⠀⠀⢻⣧⡀⠀⠀⠀⣀⣤⣶⣶⣦⣀⡴⣾⡿⠁⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⢶⣦⣿⣿⣿⣶⠲⠟⣿⡿⠟⢋⠉⣿⣾⣿⣅⣤⣶⠛⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠈⠻⣿⣿⣿⣷⣤⣾⢿⣰⣦⣼⣿⣿⣿⣿⣧⠞⠁⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⢀⠟⣻⣏⣉⣠⣿⣾⡟⣿⡏⢻⣭⣿⠋⠁⠀⠀⢀⣀⡀⠀⠀⠀
⠀⠀⠀⠀⠀⣀⡾⣴⣏⣻⣿⣟⡿⢿⣿⣿⡷⣿⣿⣿⣶⠚⣉⠙⣿⡍⠻⣷⡄⠀
⠀⠀⠀⣠⠶⣯⠉⠻⣿⣿⣿⣿⡿⢿⣿⣿⣿⣿⣿⢹⣧⠼⢿⣤⣾⣧⠀⡏⢹⠀
⠀⣠⣾⢁⣼⡇⠀⠀⣿⣿⣿⣿⣿⡆⠈⢰⣤⣈⠇⡏⣠⢰⣾⣿⣿⣿⣿⡿⢿⡄
⢸⣿⣿⣬⣿⠀⠀⠀⠿⠟⠛⠻⠯⣿⣟⣌⣯⠏⠀⢹⡿⠏⠙⠀⠙⢺⣷⣤⣿⡇
⠀⢯⠹⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠀⠀⢀⣿⢙⡗⠒⠶⠶⠿⠟⠋⠉⠀
⠀⠈⠳⠿⠛⢳⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠏⠉⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠳⣄⠀⠀⠀⠀⠀⠀⠀⠄⠈⠀⣠⠞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⣸⣷⠦⠤⠤⣄⣀⣀⣠⣴⠚⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⢀⣸⠿⡄⠀⠀⠀⠀⠀⢸⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⣴⣿⣿⣿⣴⣾⡿⠖⠒⠒⠒⢶⣏⢙⣦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⠀⠀⠀⠀⠀⠙⢷⣿⣿⡿⠶⠂⠀""",
"""
              ⠀⠀⠀⠀⠀⠈⠻⡗⢦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⣤⡤⠤⠶⠿⣶⣦⣄⣙⣦⠙⢿⡓⢦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠳⣄⠀⠀⠀⠭⣉⠓⠒⠚⠽⡄⢹⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣋⡿⠀⠀⠀⣀⡽⠀⠀⠀⠘⢈⠳⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣷⡆⢠⠖⠚⣇⠀⣙⡶⠄⠈⠰⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⠁⠐⣧⣾⡄⣄⠘⣆⡈⠷⠄⣤⣶⠈⢿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠋⠛⣦⣘⢿⣇⣿⣿⠉⠹⣗⠦⣈⠘⣾⡿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢱⡾⠛⣏⠿⠧⡀⠈⠳⣄⡙⠊⠉⠛⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣤⡤⣤⡴⠉⠀⠀⠈⢳⡀⠑⠦⡀⠈⠑⢄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⣠⣬⠷⢮⣙⣒⣤⡤⠀⠀⢹⡄⡄⢱⠀⠀⠈⢳⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠈⠛⠳⣄⠀⠀⠀⠀⠠⣌⣩⠿⠀⠒⣼⡇⠇⠈⠳⡄⠀⠈⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢈⣹⣤⣖⣸⣍⣿⠽⠤⠒⠚⠋⠀⠀⠀⠀⢸⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⣠⠾⠛⠋⠉⠉⠀⠀⠀⠀⣠⡤⠂⠀⠀⢠⡀⢰⠋⠀⢠⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⢀⣠⠤⣶⡾⠅⠀⠀⠀⠀⠀⠀⠀⠀⠸⡏⢺⠀⠀⠀⢈⣇⠜⠃⠀⣾⡈⢳⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⢻⠇⡴⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣼⠋⠈⠀⠀⢠⠞⠋⠀⢀⡾⠁⠉⠀⢻⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⢠⣏⡼⠁⠀⠀⠀⢀⡤⠤⠔⠊⢉⣡⠼⠓⠀⠀⢀⣴⣋⣀⡠⠶⠻⣄⡀⠀⠀⠈⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⣸⡿⠁⢠⠔⠒⠚⢋⡤⠖⠊⢩⡟⠀⠀⢀⣠⠞⠋⠉⠁⠀⠀⠀⠀⠀⠉⢹⠀⠀⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀
⢼⢻⠇⡤⠇⠀⢀⣴⠋⠀⠀⠀⣼⣠⠴⠚⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢧⣀⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠙⣿⡰⠂⠀⢠⣿⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⣿⡇⠀⠀⣏⢻⡀⢀⣠⠴⠛⠉⠓⠢⢄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠈⢿⣄⡀⠘⢆⡙⠋⠀⢀⡠⠔⠦⠐⠒⣚⠙⣲⡦⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠙⢧⡀⠀⠈⠉⠉⠁⣀⠀⣀⡴⠚⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠙⣶⣤⡀⠉⠘⠛⠻⣅⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠈⠳⡌⠁⠒⢄⠀⠈⠑⢢⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⠤⣄⣁⣀⣀⣀⣛⣲⣄⠀""",
"""⠀⠀⠀⠀⠀
⠀⠀⡼⣧⣬⡍⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⡞⠠⢷⣾⡎⠀⡀⠴⠤⠀⡀⠀⠀⠀⠀⠀⠀
⢸⠀⠀⡎⠀⢠⠊⠀⡐⡢⠄⠈⠢⡀⠀⠀⠀⠀
⠸⡀⠀⠈⠂⠃⠀⠙⡀⢈⠖⢠⠄⢸⡔⠈⠉⢣
⠀⠙⠀⠁⠀⠀⠀⠛⠑⢄⡠⡈⣀⣹⠀⣾⡇⢚
⠀⠀⠑⡆⠂⠲⠐⡀⠀⠀⢀⢩⣻⡷⠊⠊⠿⠛
⠀⠀⠀⢆⠀⢀⡀⠁⠈⠈⠁⠚⢹⠁⠀⠀⠀⠀
⠀⠀⠀⡆⠀⠀⠁⠀⠀⠀⠰⠀⡇⠀⠀⠀⠀⠀
⠀⠀⠀⠱⠀⠀⢓⣰⠀⠀⢀⡀⡇⠀⠀⠀⠀⠀
⠀⡀⠤⠃⠒⠀⠀⠀⠀⣠⠀⢀⠏⠀⠀⠀⠀⠀
⡘⠀⠀⢀⡀⠀⢀⠤⡄⠀⠀⠺⡀⠀⠀⠀⠀⠀
⢇⣀⡀⠄⠀⠤⠊⠀⢸⠀⢀⠀⢇⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠠⣎⣀⠀⠀⢈⣢⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠀⠀⠈⠁⠀⠀""",
]
